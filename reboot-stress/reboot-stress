#!/usr/bin/env python

from Tkinter import *
import os

def getCount():
    fpath = os.getenv('HOME') + "/count.txt"
    if os.path.exists(fpath):
        f = open(fpath, "r")
        rbuf = f.readline()
        f.close()
    else:
        setCount(0)
        return 0

    return int(rbuf[:-1])

def setCount(count):
    fpath = os.getenv('HOME') + "/count.txt"
    f = open(fpath, "w")
    f.write(str(count)+"\n")
    f.close()

def removeCount():
    fpath = os.getenv('HOME') + "/count.txt"
    if os.path.exists(fpath):
        os.remove(fpath)

class AppFrame(Frame):
    __appRunning = False

    def __init__(self, master=None):
        Frame.__init__(self, master)
        self.grid()
        self.createFrame()
        self.startRunning()

    def createFrame(self):
        self.inputText = Label(self)
        self.inputText['text'] = "Remaining Reboot:"
        self.inputText.grid(row=0, column=0)
        self.inputField = Entry(self)
        self.inputField['width'] = 10
        self.inputField.insert(0, getCount())
        self.inputField.grid(row=0, column=1)
        self.countDownText = Label(self)
        self.countDownText.grid(row=1, column=0)

        self.onoff = Button(self)
        if (getCount() == 0):
            self.onoff['text'] = "Start"
            self.onoff['command'] = self.startMethod
        else:
            self.onoff['text'] = "Stop"
            self.onoff['command'] = self.stopMethod
            self.inputField['state'] = DISABLED
        self.onoff.grid(row=1, column=1)

    def startMethod(self):
        inCount = self.inputField.get()
        setCount(int(inCount))
        self.onoff['text'] = "Stop"
        self.onoff['command'] = self.stopMethod
        self.inputField['state'] = DISABLED
        self.__appRunning = True
        self.startRunning()
        
    def stopMethod(self):
        self.onoff['text'] = "Start"
        self.onoff['command'] = self.startMethod
        self.inputField['state'] = NORMAL
        self.__appRunning = False
        removeCount()

    def startRunning(self):
        remainingCount = getCount()
        if remainingCount > 0:
            self.__appRunning = True
            self.remaining = 0
            self.countdown(10)

    def countdown(self, remaining = None):
        if remaining is not None:
            self.remaining = remaining

        if self.__appRunning == False:
            self.countDownText.configure(text="")
            return
        if self.remaining <= 0:
            self.countDownText.configure(text="Reboot!")
            remaingReboot = getCount()
            setCount(remaingReboot-1)
            os.system('reboot')
        else:
            self.countDownText.configure(text="%d" % self.remaining)
            self.remaining = self.remaining - 1
            self.after(1000, self.countdown)
        
if __name__ == '__main__':
    root = Tk()
    app = AppFrame(master=root)
    app.mainloop()
