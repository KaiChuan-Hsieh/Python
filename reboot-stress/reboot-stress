#!/usr/bin/env python

from Tkinter import *
import os
import pwd

def writeAutostart():
    uid = os.getenv('SUDO_UID') or os.getenv('PKEXEC_UID')
    if not uid:
        sys.stderr.write('Unable to determine invoking user\n')
        sys.exit(1)

    username = pwd.getpwuid(int(uid)).pw_name
    default_config_directory = os.path.expanduser('~{0}/.config'
                                                      .format(username))
    config_directory = os.getenv('XDG_CONFIG_HOME',
                                     default_config_directory)
    autostart_directory = os.path.join(config_directory, 'autostart')
    if not os.path.exists(autostart_directory):
        os.makedirs(autostart_directory)

    fpath = "/home/" + username + "/.config/autostart/reboot-stress.desktop"
    if not os.path.exists(fpath):
        f = open(fpath, "w")
        f.write("[Desktop Entry]\n")
        f.write("Name=reboot stress\n")
        f.write("Comment=Verify reboot works properly\n")
        f.write("Exec=sudo /usr/bin/reboot-stress\n")
        f.write("Type=Application\n")
        f.write("X-GNOME-Autostart-enabled=true\n")
        f.write("Hidden=false")
        f.close()

def removeAutostart():
    uid = os.getenv('SUDO_UID') or os.getenv('PKEXEC_UID')
    if not uid:
        sys.stderr.write('Unable to determine invoking user\n')
        sys.exit(1)
    username = pwd.getpwuid(int(uid)).pw_name
    fpath = "/home/" + username + "/.config/autostart/reboot-stress.desktop"
    if os.path.exists(fpath):
        os.remove(fpath)

def getCount():
    fpath = os.getenv('HOME') + "/count.txt"
    if os.path.exists(fpath):
        f = open(fpath, "r")
        rbuf = f.readline()
        f.close()
    else:
        setCount(0)
        return 0

    if rbuf[:-1].isdigit():
        return int(rbuf[:-1])

    return 0

def setCount(count):
    fpath = os.getenv('HOME') + "/count.txt"
    f = open(fpath, "w")
    f.write(str(count)+"\n")
    f.close()

def removeCount():
    fpath = os.getenv('HOME') + "/count.txt"
    if os.path.exists(fpath):
        os.remove(fpath)

class AppFrame(Frame):
    __appRunning = False

    def __init__(self, master=None):
        Frame.__init__(self, master)
        self.grid()
        self.createFrame()
        self.startRunning()

    def createFrame(self):
        self.inputText = Label(self)
        self.inputText['text'] = "Remaining Reboot:"
        self.inputText.grid(row=0, column=0)
        self.inputField = Entry(self)
        self.inputField['width'] = 10
        self.inputField.insert(0, getCount())
        self.inputField.grid(row=0, column=1)
        self.countDownText = Label(self)
        self.countDownText.grid(row=1, column=0)

        self.onoff = Button(self)
        self.onoff.grid(row=1, column=1)

    def startMethod(self):
        inCount = self.inputField.get()
        setCount(int(inCount))
        os.system('systemctl disable hciuart')
        writeAutostart()
        self.startRunning()
        
    def stopMethod(self):
        removeCount()
        os.system('systemctl enable hciuart')
        removeAutostart()
        self.startRunning()

    def startRunning(self):
        remainingCount = getCount()
        if remainingCount > 0:
            self.onoff['text'] = "Stop"
            self.onoff['command'] = self.stopMethod
            self.inputField['state'] = DISABLED
            self.__appRunning = True
            self.remaining = 0
            self.countdown(10)
        else:
            self.onoff['text'] = "Start"
            self.onoff['command'] = self.startMethod
            self.inputField['state'] = NORMAL
            self.__appRunning = False

    def countdown(self, remaining = None):
        if remaining is not None:
            self.remaining = remaining

        if self.__appRunning == False:
            self.countDownText.configure(text="")
            return
        if self.remaining <= 0:
            self.countDownText.configure(text="Reboot!")
            remaingReboot = getCount()
            setCount(remaingReboot-1)
            os.system('reboot')
        else:
            self.countDownText.configure(text="%d" % self.remaining)
            self.remaining = self.remaining - 1
            self.after(1000, self.countdown)
        
if __name__ == '__main__':
    # Verify that script is run as root
    if os.getuid():
        sys.stderr.write('This script needs superuser '
                         'permissions to run correctly\n')
        sys.exit(1)
    root = Tk()
    app = AppFrame(master=root)
    app.mainloop()
